document.addEventListener('DOMContentLoaded', function() {
    const mobileMenuBtn = document.querySelector('.mobile-menu-btn');
    const navMenu = document.querySelector('nav ul');
    
    if (mobileMenuBtn && navMenu) {
        mobileMenuBtn.addEventListener('click', function() {
            navMenu.classList.toggle('show');
        });
    }

    const authTabs = document.querySelectorAll('.auth-tabs .tab-btn');
    const authForms = document.querySelectorAll('.auth-form');
    
    if (authTabs.length && authForms.length) {
        authTabs.forEach(tab => {
            tab.addEventListener('click', function() {
                const tabId = this.getAttribute('data-tab');
                
                authTabs.forEach(t => t.classList.remove('active'));
                authForms.forEach(f => f.classList.remove('active'));
                
                this.classList.add('active');
                document.getElementById(tabId).classList.add('active');
            });
        });
    }

    

    const profileTabs = document.querySelectorAll('.profile-courses .tab-btn');
    const profileTabContents = document.querySelectorAll('.profile-courses .tab-content');
    
    if (profileTabs.length && profileTabContents.length) {
        profileTabs.forEach(tab => {
            tab.addEventListener('click', function() {
                const tabId = this.getAttribute('data-tab');
                
                profileTabs.forEach(t => t.classList.remove('active'));
                profileTabContents.forEach(c => c.classList.remove('active'));
                
                this.classList.add('active');
                document.getElementById(tabId).classList.add('active');
            });
        });
    }

const applyFiltersBtn = document.getElementById('apply-filters');
    
    if (applyFiltersBtn) {
        applyFiltersBtn.addEventListener('click', function() {
            const categoryFilter = document.getElementById('category-filter').value;
            const priceFilter = document.getElementById('price-filter').value;
            const courseCards = document.querySelectorAll('.course-card');
            
            courseCards.forEach(card => {
                const cardCategory = card.getAttribute('data-category') || 'all';
                const cardScience = card.getAttribute('data-science') || 'all';
                const cardPrice = card.querySelector('.price').textContent.toLowerCase();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞)
                const categoryMatch = categoryFilter === 'all' || cardCategory === categoryFilter;
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É –Ω–∞—É–∫–∏
                const scienceMatch = cardScience === 'all' || 
                                   (categoryFilter === 'social' && cardScience === 'social') ||
                                   (categoryFilter === 'technical' && cardScience === 'technical');
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω–µ
                const priceMatch = priceFilter === 'all' || 
                                 (priceFilter === 'free' && cardPrice.includes('–±–µ—Å–ø–ª–∞—Ç–Ω–æ')) || 
                                 (priceFilter === 'paid' && !cardPrice.includes('–±–µ—Å–ø–ª–∞—Ç–Ω–æ'));
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç
                if (categoryMatch && scienceMatch && priceMatch) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        });
    }


    const loginForm = document.getElementById('login-form');
    const registerForm = document.getElementById('register-form');
    
    if (loginForm) {
        loginForm.addEventListener('submit', function(e) {
            e.preventDefault();
            alert('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.');
            window.location.href = 'profile.html';
        });
    }
    
    if (registerForm) {
        registerForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const password = document.getElementById('reg-password').value;
            const confirmPassword = document.getElementById('reg-confirm-password').value;
            
            if (password !== confirmPassword) {
                alert('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
                return;
            }
            
            alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.');
            document.querySelector('.tab-btn[data-tab="login"]').click();
        });
    }

    const likeBtns = document.querySelectorAll('.like-btn');
    
    likeBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            let likes = parseInt(this.textContent.match(/\d+/) || 0);
            this.textContent = `üëç ${likes + 1}`;
        });
    });
    // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–º–µ–Ω—ã –§–ò–û –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
    const profileName = document.querySelector('.profile-name');
    const editNameBtn = document.getElementById('edit-name-btn');
    const nameForm = document.getElementById('name-form');
    const saveNameBtn = document.getElementById('save-name-btn');
    const cancelNameBtn = document.getElementById('cancel-name-btn');
    
    if (editNameBtn && nameForm) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        editNameBtn.addEventListener('click', function() {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            const currentName = profileName.textContent.trim().split(' ');
            document.getElementById('last-name').value = currentName[0] || '';
            document.getElementById('first-name').value = currentName[1] || '';
            document.getElementById('middle-name').value = currentName[2] || '';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            nameForm.style.display = 'block';
            editNameBtn.style.display = 'none';
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        saveNameBtn.addEventListener('click', function() {
            const lastName = document.getElementById('last-name').value.trim();
            const firstName = document.getElementById('first-name').value.trim();
            const middleName = document.getElementById('middle-name').value.trim();
            
            if (!lastName || !firstName) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–§–∞–º–∏–ª–∏—è –∏ –ò–º—è)');
                return;
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –§–ò–û
            let newName = lastName + ' ' + firstName;
            if (middleName) {
                newName += ' ' + middleName;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏
            profileName.textContent = newName;
            
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å AJAX-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            
            // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            nameForm.style.display = 'none';
            editNameBtn.style.display = 'inline-block';
            
            alert('–§–ò–û —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!');
        });
        
        // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cancelNameBtn.addEventListener('click', function() {
            nameForm.style.display = 'none';
            editNameBtn.style.display = 'inline-block';
        });
    }

    const commentBtns = document.querySelectorAll('.comment-btn');
    
    commentBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            const commentsSection = this.closest('.blog-actions').nextElementSibling;
            
            if (commentsSection && commentsSection.classList.contains('comments-section')) {
                commentsSection.classList.toggle('hidden');
                
                if (commentsSection.classList.contains('hidden')) {
                    this.textContent = this.textContent.replace('–°–∫—Ä—ã—Ç—å', '–ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å');
                } else {
                    this.textContent = this.textContent.replace('–ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å', '–°–∫—Ä—ã—Ç—å');
                }
            }
        });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    document.querySelectorAll('.comment-form').forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            const textarea = this.querySelector('textarea');
            const commentText = textarea.value.trim();
            
            if (commentText) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                const commentDiv = document.createElement('div');
                commentDiv.className = 'comment';
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                const now = new Date();
                const timestamp = now.toLocaleString();
                
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º "–ê–Ω–æ–Ω–∏–º")
                const username = "–í—ã"; // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                
                commentDiv.innerHTML = `
                    <p><strong>${username}:</strong> ${commentText}</p>
                    <small>${timestamp}</small>
                `;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
                const commentsContainer = this.closest('.comments-section').querySelector('.comments-container') || 
                                         this.closest('.comments-section');
                commentsContainer.insertBefore(commentDiv, commentsContainer.firstChild);
                
                // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                textarea.value = '';
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ localStorage
                saveCommentToStorage(this.closest('.blog-post').id, username, commentText, timestamp);
            }
        });
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    loadSavedComments();

    function saveCommentToStorage(postId, username, text, timestamp) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ localStorage
        const comments = JSON.parse(localStorage.getItem('blogComments')) || {};
        
        // –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞ –µ—â–µ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤
        if (!comments[postId]) {
            comments[postId] = [];
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        comments[postId].unshift({
            username: username,
            text: text,
            timestamp: timestamp
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ localStorage
        localStorage.setItem('blogComments', JSON.stringify(comments));
    }

    function loadSavedComments() {
        const comments = JSON.parse(localStorage.getItem('blogComments')) || {};
        
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ –±–ª–æ–≥–µ
        document.querySelectorAll('.blog-post').forEach(post => {
            const postId = post.id;
            if (comments[postId]) {
                const commentsContainer = post.querySelector('.comments-container') || 
                                         post.querySelector('.comments-section');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                comments[postId].forEach(comment => {
                    const commentDiv = document.createElement('div');
                    commentDiv.className = 'comment';
                    commentDiv.innerHTML = `
                        <p><strong>${comment.username}:</strong> ${comment.text}</p>
                        <small>${comment.timestamp}</small>
                    `;
                    commentsContainer.appendChild(commentDiv);
                });
            }
        });
    }

});